# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate
)
# Import the NHSmail mailbox report from your data sub-directory
df_mbr <- read.csv(file("data_temp/Mailbox Report.csv"))
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries2023.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate
)
# Import the NHSmail mailbox report from your data sub-directory
df_mbr <- read.csv(file("data_temp/Mailbox Report.csv"))
# Import the NHSmail MFA status report from your data sub-directory
df_mfr <- read.csv(file("data_temp/MFAStatusReport.csv"))
# Filter mailbox report for active user mailboxes
df_mbr <- df_mbr %>%
filter(Status == "Active" & MailboxType == "User")
df_work <- subset(df_mbr, select = c("EmailAddress"))
# get the MFA status for each user from the MFA report
df_work$MFAStatus <- with(df_mfr, MFAStatus[match(df_work$EmailAddress, EmailAddress)])
# Create a second dataframe to count occurrences of the text in
# the MFAStatus column in the mailbox report
df_work_grouped <- df_work %>%
count(MFAStatus)
# Set today's date
date_import <- today()
# Add a new column named 'date' and populate it with the value of date_import
df_work_grouped['date']= date_import
View(df_work_grouped)
if (!file.exists(timeseriesloc)) {
write.csv(df_work_grouped, file = timeseriesloc, row.names = FALSE)
} else {
# Import existing data
df_previous <- read.csv(file = timeseriesloc)
# Merge the two datasets
df_merged <- rbind(df_work_grouped, df_previous)
# Save the resulting dataset back to the monthly file
write.csv(df_merged, file = timeseriesloc, row.names = FALSE)
}
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries2023.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate
)
# Import the NHSmail mailbox report from your data sub-directory
df_mbr <- read.csv(file("data_temp/Mailbox Report.csv"))
# Import the NHSmail MFA status report from your data sub-directory
df_mfr <- read.csv(file("data_temp/MFAStatusReport.csv"))
# Filter mailbox report for active user mailboxes
df_mbr <- df_mbr %>%
filter(Status == "Active" & MailboxType == "User")
df_work <- subset(df_mbr, select = c("EmailAddress"))
# get the MFA status for each user from the MFA report
df_work$MFAStatus <- with(df_mfr, MFAStatus[match(df_work$EmailAddress, EmailAddress)])
# Create a second dataframe to count occurrences of the text in
# the MFAStatus column in the mailbox report
df_work_grouped <- df_work %>%
count(MFAStatus)
# Set today's date
date_import <- today()
# Add a new column named 'date' and populate it with the value of date_import
df_work_grouped['date']= date_import
if (!file.exists(timeseriesloc)) {
write.csv(df_work_grouped, file = timeseriesloc, row.names = FALSE)
} else {
# Import existing data
df_previous <- read.csv(file = timeseriesloc)
# Merge the two datasets
df_merged <- rbind(df_work_grouped, df_previous)
# Save the resulting dataset back to the monthly file
write.csv(df_merged, file = timeseriesloc, row.names = FALSE)
}
# set working directory where the mailbox report can be found
setwd("c:/b")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries.csv"
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate,
ggthemes,
ggtext
)
# Import the NHSmail mailbox report from your working directory
df <- read.csv(file(timeseriesloc))
# define the date format
df$date = as.Date(df$date, "%Y-%m-%d")
# create the plot
df_plot <- ggplot() +
# plot line data
geom_line(data = df, aes(x = date, y = n, group = MFAStatus, colour = MFAStatus), size = 2) +
# set scales
scale_x_date(date_labels = "%d %b %y") +
scale_colour_discrete("MFA status") +
# set axis labels
xlab("Date") +
ylab("NHSmail accounts") +
ggtitle("The uptake of NHSmail multi factor authentication at Dorset HealthCare") +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.y = element_text(size = 9.5))
df_plot
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries2023.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate,
ggthemes,
ggtext
)
# Import the NHSmail mailbox report from your working directory
df <- read.csv(file(timeseriesloc))
# define the date format
df$date = as.Date(df$date, "%Y-%m-%d")
# create the plot
df_plot <- ggplot() +
# plot line data
geom_line(data = df, aes(x = date, y = n, group = MFAStatus, colour = MFAStatus), size = 2) +
# set scales
scale_x_date(date_labels = "%d %b %y") +
scale_colour_discrete("MFA status") +
# set axis labels
xlab("Date") +
ylab("NHSmail accounts") +
ggtitle("The uptake of NHSmail multi factor authentication at Dorset HealthCare") +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.y = element_text(size = 9.5))
df_plot
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries2023.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate
)
# Import the NHSmail mailbox report from your data sub-directory
df_mbr <- read.csv(file("data_temp/Mailbox Report.csv"))
# Import the NHSmail MFA status report from your data sub-directory
df_mfr <- read.csv(file("data_temp/MFAStatusReport.csv"))
# Filter mailbox report for active user mailboxes
df_mbr <- df_mbr %>%
filter(Status == "Active" & MailboxType == "User")
df_work <- subset(df_mbr, select = c("EmailAddress"))
# get the MFA status for each user from the MFA report
df_work$MFAStatus <- with(df_mfr, MFAStatus[match(df_work$EmailAddress, EmailAddress)])
# Create a second dataframe to count occurrences of the text in
# the MFAStatus column in the mailbox report
df_work_grouped <- df_work %>%
count(MFAStatus)
# Set today's date
date_import <- today()
# Add a new column named 'date' and populate it with the value of date_import
df_work_grouped['date']= date_import
if (!file.exists(timeseriesloc)) {
write.csv(df_work_grouped, file = timeseriesloc, row.names = FALSE)
} else {
# Import existing data
df_previous <- read.csv(file = timeseriesloc)
# Merge the two datasets
df_merged <- rbind(df_work_grouped, df_previous)
# Save the resulting dataset back to the monthly file
write.csv(df_merged, file = timeseriesloc, row.names = FALSE)
}
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries2023.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate
)
# Import the NHSmail mailbox report from your data sub-directory
df_mbr <- read.csv(file("data_temp/Mailbox Report.csv"))
# Import the NHSmail MFA status report from your data sub-directory
df_mfr <- read.csv(file("data_temp/MFAStatusReport.csv"))
# Filter mailbox report for active user mailboxes
df_mbr <- df_mbr %>%
filter(Status == "Active" & MailboxType == "User")
df_work <- subset(df_mbr, select = c("EmailAddress"))
# get the MFA status for each user from the MFA report
df_work$MFAStatus <- with(df_mfr, MFAStatus[match(df_work$EmailAddress, EmailAddress)])
# Create a second dataframe to count occurrences of the text in
# the MFAStatus column in the mailbox report
df_work_grouped <- df_work %>%
count(MFAStatus)
# Set today's date
date_import <- today()
# Add a new column named 'date' and populate it with the value of date_import
df_work_grouped['date']= date_import
if (!file.exists(timeseriesloc)) {
write.csv(df_work_grouped, file = timeseriesloc, row.names = FALSE)
} else {
# Import existing data
df_previous <- read.csv(file = timeseriesloc)
# Merge the two datasets
df_merged <- rbind(df_work_grouped, df_previous)
# Save the resulting dataset back to the monthly file
write.csv(df_merged, file = timeseriesloc, row.names = FALSE)
}
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries2023.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate,
ggthemes,
ggtext
)
# Import the NHSmail mailbox report from your working directory
df <- read.csv(file(timeseriesloc))
# define the date format
df$date = as.Date(df$date, "%Y-%m-%d")
# create the plot
df_plot <- ggplot() +
# plot line data
geom_line(data = df, aes(x = date, y = n, group = MFAStatus, colour = MFAStatus), size = 2) +
# set scales
scale_x_date(date_labels = "%d %b %y") +
scale_colour_discrete("MFA status") +
# set axis labels
xlab("Date") +
ylab("NHSmail accounts") +
ggtitle("The uptake of NHSmail multi factor authentication at Dorset HealthCare") +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.y = element_text(size = 9.5))
df_plot
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries2023.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate
)
# Import the NHSmail mailbox report from your data sub-directory
df_mbr <- read.csv(file("data_temp/Mailbox Report.csv"))
# Import the NHSmail MFA status report from your data sub-directory
df_mfr <- read.csv(file("data_temp/MFAStatusReport.csv"))
# Filter mailbox report for active user mailboxes
df_mbr <- df_mbr %>%
filter(Status == "Active" & MailboxType == "User")
df_work <- subset(df_mbr, select = c("EmailAddress"))
# get the MFA status for each user from the MFA report
df_work$MFAStatus <- with(df_mfr, MFAStatus[match(df_work$EmailAddress, EmailAddress)])
# Create a second dataframe to count occurrences of the text in
# the MFAStatus column in the mailbox report
df_work_grouped <- df_work %>%
count(MFAStatus)
# Set today's date
date_import <- today()
# Add a new column named 'date' and populate it with the value of date_import
df_work_grouped['date']= date_import
if (!file.exists(timeseriesloc)) {
write.csv(df_work_grouped, file = timeseriesloc, row.names = FALSE)
} else {
# Import existing data
df_previous <- read.csv(file = timeseriesloc)
# Merge the two datasets
df_merged <- rbind(df_work_grouped, df_previous)
# Save the resulting dataset back to the monthly file
write.csv(df_merged, file = timeseriesloc, row.names = FALSE)
}
View(df_merged)
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries2023.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate,
ggthemes,
ggtext
)
# Import the NHSmail mailbox report from your working directory
df <- read.csv(file(timeseriesloc))
# define the date format
df$date = as.Date(df$date, "%Y-%m-%d")
# create the plot
df_plot <- ggplot() +
# plot line data
geom_line(data = df, aes(x = date, y = n, group = MFAStatus, colour = MFAStatus), size = 2) +
# set scales
scale_x_date(date_labels = "%d %b %y") +
scale_colour_discrete("MFA status") +
# set axis labels
xlab("Date") +
ylab("NHSmail accounts") +
ggtitle("The uptake of NHSmail multi factor authentication at Dorset HealthCare") +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.y = element_text(size = 9.5))
df_plot
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries2023.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate
)
# Import the NHSmail mailbox report from your data sub-directory
df_mbr <- read.csv(file("data_temp/Mailbox Report.csv"))
# Import the NHSmail MFA status report from your data sub-directory
df_mfr <- read.csv(file("data_temp/MFAStatusReport.csv"))
# Filter mailbox report for active user mailboxes
df_mbr <- df_mbr %>%
filter(Status == "Active" & MailboxType == "User")
df_work <- subset(df_mbr, select = c("EmailAddress"))
# get the MFA status for each user from the MFA report
df_work$MFAStatus <- with(df_mfr, MFAStatus[match(df_work$EmailAddress, EmailAddress)])
# Create a second dataframe to count occurrences of the text in
# the MFAStatus column in the mailbox report
df_work_grouped <- df_work %>%
count(MFAStatus)
# Set today's date
date_import <- today()
# Add a new column named 'date' and populate it with the value of date_import
df_work_grouped['date']= date_import
if (!file.exists(timeseriesloc)) {
write.csv(df_work_grouped, file = timeseriesloc, row.names = FALSE)
} else {
# Import existing data
df_previous <- read.csv(file = timeseriesloc)
# Merge the two datasets
df_merged <- rbind(df_work_grouped, df_previous)
# Save the resulting dataset back to the monthly file
write.csv(df_merged, file = timeseriesloc, row.names = FALSE)
}
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set working directory where the mailbox report can be found
setwd("c:/github/nhsmail-scripts")
# set file path where you want to keep time series data as a CSV
# you may want this to be somewhere that gets backed up
timeseriesloc <- "j:/MFAstatusTimeSeries2023.csv"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
utils,
lubridate,
ggthemes,
ggtext
)
# Import the NHSmail mailbox report from your working directory
df <- read.csv(file(timeseriesloc))
# define the date format
df$date = as.Date(df$date, "%Y-%m-%d")
# create the plot
df_plot <- ggplot() +
# plot line data
geom_line(data = df, aes(x = date, y = n, group = MFAStatus, colour = MFAStatus), size = 2) +
# set scales
scale_x_date(date_labels = "%d %b %y") +
scale_colour_discrete("MFA status") +
# set axis labels
xlab("Date") +
ylab("NHSmail accounts") +
ggtitle("The uptake of NHSmail multi factor authentication at Dorset HealthCare") +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.y = element_text(size = 9.5))
df_plot
